;;; meshtastic/remote-hardware.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl
(cl:progn
 (cl:eval-when (:compile-toplevel) (sb-ext:restrict-compiler-policy 'cl:debug 0 1))
 (cl:declaim (cl:optimize (sb-c:store-coverage-data 0))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.MESHTASTIC")
    (cl:defpackage "CL-PROTOBUFS.MESHTASTIC" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:in-package "CL-PROTOBUFS.MESHTASTIC")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:define-schema 'remote-hardware
    :syntax :proto3

     :package "meshtastic")
)


;;; Top-Level messages

(pi:define-message hardware-message
    ()
  ;; Nested enums

  (pi:define-enum hardware-message.type
      ()
    (:unset :index 0)
    (:write-gpios :index 1)
    (:watch-gpios :index 2)
    (:gpios-changed :index 3)
    (:read-gpios :index 4)
    (:read-gpios-reply :index 5))
  ;; Fields
  (type
   :index 1 :type hardware-message.type :kind :enum :label (:optional) :json-name "type" :default :unset)
  (gpio-mask
   :index 2 :type cl-protobufs:uint64 :kind :scalar :label (:optional) :json-name "gpioMask")
  (gpio-value
   :index 3 :type cl-protobufs:uint64 :kind :scalar :label (:optional) :json-name "gpioValue"))

(cl:export '(gpio-mask
             gpio-value
             hardware-message
             hardware-message.type
             hardware-message.type-int-to-keyword
             hardware-message.type-keyword-to-int
             remote-hardware
             type))
