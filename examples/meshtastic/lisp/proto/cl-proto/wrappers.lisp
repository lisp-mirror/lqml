;;; wrappers.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl
(cl:progn
 (cl:eval-when (:compile-toplevel) (sb-ext:restrict-compiler-policy 'cl:debug 0 1))
 (cl:declaim (cl:optimize (sb-c:store-coverage-data 0))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")
    (cl:defpackage "CL-PROTOBUFS.GOOGLE.PROTOBUF" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:in-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:define-schema 'wrappers
    :syntax :proto3

     :package "google.protobuf")
)


;;; Top-Level messages

(pi:define-message double-value
    ()
  ;; Fields
  (value
   :index 1 :type cl:double-float :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message float-value
    ()
  ;; Fields
  (value
   :index 1 :type cl:float :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message int64-value
    ()
  ;; Fields
  (value
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message u-int64-value
    ()
  ;; Fields
  (value
   :index 1 :type cl-protobufs:uint64 :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message int32-value
    ()
  ;; Fields
  (value
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message u-int32-value
    ()
  ;; Fields
  (value
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message bool-value
    ()
  ;; Fields
  (value
   :index 1 :type cl:boolean :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message string-value
    ()
  ;; Fields
  (value
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message bytes-value
    ()
  ;; Fields
  (value
   :index 1 :type cl-protobufs:byte-vector :kind :scalar :label (:optional) :json-name "value"))


(cl:export '(bool-value
             bytes-value
             double-value
             float-value
             int32-value
             int64-value
             string-value
             u-int32-value
             u-int64-value
             value
             wrappers))
